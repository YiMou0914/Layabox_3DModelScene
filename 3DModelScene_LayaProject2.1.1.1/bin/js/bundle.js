var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameMgr_1 = require("./scripts/GameMgr");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("scripts/GameMgr.ts", GameMgr_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "Main.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = true;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./scripts/GameMgr":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameMgr_1 = require("./GameMgr");
var Mathf_1 = require("./utils/Mathf");
var CameraSpin = /** @class */ (function (_super) {
    __extends(CameraSpin, _super);
    function CameraSpin() {
        var _this = _super.call(this) || this;
        _this.G_fZoomSpeed = -16; //缩放值
        _this.distance = 5;
        _this.minDistance = 0.6;
        _this.maxDistance = 20;
        /**设置旋转角度 */
        _this.x = 0;
        _this.y = 0;
        _this.z = 0;
        /**y轴角度限制，设置成一样则该轴不旋转 */
        _this.yMinLimit = -90;
        _this.yMaxLimit = 90;
        /**x轴角度限制，同上 */
        _this.leftMax = -365;
        _this.rightMax = 365;
        /**旋转速度值 */
        _this.xSpeed = 5;
        _this.ySpeed = 5;
        _this.rotation = new Laya.Quaternion();
        _this.position = new Laya.Vector3();
        _this.curTouchCount = 0;
        return _this;
    }
    Object.defineProperty(CameraSpin.prototype, "targetPos", {
        get: function () {
            return this.target.transform.position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CameraSpin.prototype, "cameraPos", {
        get: function () {
            if (this._cameraPos == null) {
                this._cameraPos = this.cameraNode.transform.position;
            }
            return this._cameraPos;
        },
        set: function (v) {
            this.cameraNode.transform.position = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CameraSpin.prototype, "cameraRot", {
        get: function () {
            if (this._cameraRot == null) {
                this._cameraRot = this.cameraNode.transform.rotation;
            }
            return this._cameraRot;
        },
        set: function (v) {
            this.cameraNode.transform.rotation = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CameraSpin.prototype, "camViewTargetPos", {
        get: function () {
            if (this._camViewTargetPos == null) {
                this._camViewTargetPos = this.targetPos;
            }
            return this._camViewTargetPos;
        },
        set: function (v) {
            this._camViewTargetPos = v;
        },
        enumerable: true,
        configurable: true
    });
    CameraSpin.prototype.onStart = function () {
        console.log(GameMgr_1.default.instance.scene3D);
        this.cameraNode = GameMgr_1.default.instance.scene3D.getChildByName("Main Camera");
        this.target = GameMgr_1.default.instance.scene3D.getChildByName("00anganzhafa");
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.handleMouseDown);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.handleMouseUp);
        Laya.stage.on(Laya.Event.MOUSE_WHEEL, this, this.handleMouseWheel);
        this.SetCamPoint(this.cameraPos);
    };
    /**设置摄像机的点位 */
    CameraSpin.prototype.SetCamPoint = function (pos) {
        this.cameraPos = pos;
        //this.cameraNode.transform.lookAt(this.camViewTargetPos, this.VEC_UP); 
        var qua = Mathf_1.default.GetToTargetRotation(Mathf_1.default.Vec_Sub(this.camViewTargetPos, this.cameraPos));
        this.cameraRot = qua;
        this.AdjustValue();
    };
    /**
     * 调整xyz,position,rotation,distance
     */
    CameraSpin.prototype.AdjustValue = function () {
        this.distance = Laya.Vector3.distance(this.camViewTargetPos, this.cameraPos);
        console.log("重置distance:" + this.distance);
        this.position = this.cameraPos;
        this.rotation = this.cameraRot;
        this.x = Mathf_1.default.QuaToVec(this.cameraRot).x;
        this.y = Mathf_1.default.QuaToVec(this.cameraRot).y;
        this.z = Mathf_1.default.QuaToVec(this.cameraRot).z;
        console.log("调整后Camera的rotation:" + this.cameraNode.transform.rotationEuler.x + " " + this.cameraNode.transform.rotationEuler.y + " " + this.cameraNode.transform.rotationEuler.z);
    };
    CameraSpin.prototype.handleMouseDown = function (event) {
        var arr = event.touches;
        if (arr == undefined) {
            arr = new Array();
            arr[0] = event;
        }
        this.curTouchCount = arr.length;
        this.oldTouch0 = new Laya.Vector3(arr[0].stageX, arr[0].stageY, 0);
        if (this.curTouchCount == 2) {
            this.oldTouch1 = new Laya.Vector3(arr[1].stageX, arr[1].stageY, 0);
        }
        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.handleMouseMove);
        Laya.stage.on(Laya.Event.MOUSE_OUT, this, this.handleMouseUp);
    };
    CameraSpin.prototype.handleMouseMove = function (event) {
        var arr = event.touches;
        if (arr == undefined) {
            arr = new Array();
            arr[0] = event;
        }
        if (arr.length == 2) {
            this.curTouchCount = 2;
        }
        if (this.curTouchCount == 1) {
            this.onTouchOne(arr[0]);
        }
        else if (this.curTouchCount == 2) {
            this.onTouchTwo(event);
        }
    };
    CameraSpin.prototype.onTouchOne = function (event) {
        if (this.isNeedAdjust == true) {
            this.AdjustValue();
            this.isNeedAdjust = false;
        }
        this.newTouch0 = new Laya.Vector3(event.stageX, event.stageY, 0);
        var dir = Mathf_1.default.Vec_Sub(this.newTouch0, this.oldTouch0);
        this.x += dir.y * this.xSpeed * -0.05;
        this.y += dir.x * this.ySpeed * -0.05;
        this.distance = Mathf_1.default.Clamp(this.distance, this.minDistance, this.maxDistance);
        this.x = Mathf_1.default.Clamp(this.x, -90, 90);
        this.rotation = Mathf_1.default.VecToQua(new Laya.Vector3(this.x, this.y, this.z));
        this.position = Mathf_1.default.Vec_Add(Mathf_1.default.VecDotQua(new Laya.Vector3(0, 0, this.distance), this.rotation), this.camViewTargetPos);
        this.cameraPos = this.position;
        this.cameraRot = this.rotation;
        this.oldTouch0 = this.newTouch0;
        //console.log("eluer:" + this.cameraNode.transform.rotationEuler.x + " " + this.cameraNode.transform.rotationEuler.y + " " + this.cameraNode.transform.rotationEuler.z);
    };
    /**处理双指触控 */
    CameraSpin.prototype.onTouchTwo = function (event) {
        var arr = event.touches;
        if (arr == undefined && arr.length != 2) {
            return;
        }
        this.newTouch0 = new Laya.Vector3(arr[0].stageX, arr[0].stageY, 0);
        this.newTouch1 = new Laya.Vector3(arr[1].stageX, arr[1].stageY, 0);
        var oldDistance = Laya.Vector3.distance(this.oldTouch0, this.oldTouch1);
        var newDistance = Laya.Vector3.distance(this.newTouch0, this.newTouch1);
        var offset = newDistance - oldDistance;
        this.HorVerMoveByTouch(arr);
        this.processToFarAndNear(offset / 30);
        this.oldTouch0 = this.newTouch0;
        this.oldTouch1 = this.newTouch1;
    };
    /* 处理上下左右平移移动视角（触屏）*/
    CameraSpin.prototype.HorVerMoveByTouch = function (arr) {
        var point1 = Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Add(this.newTouch0, this.newTouch1), 0.5);
        var point2 = Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Add(this.oldTouch0, this.oldTouch1), 0.5);
        var dirVec2 = Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Sub(point1, point2), 0.0025);
        if (Laya.Vector3.scalarLength(dirVec2) > 0.005) {
            var temp = Mathf_1.default.VecDotQua(new Laya.Vector3(-dirVec2.x, dirVec2.y, 0), this.cameraRot);
            this.cameraPos = Mathf_1.default.Vec_Add(this.cameraPos, temp);
            this.camViewTargetPos = Mathf_1.default.Vec_Add(this.camViewTargetPos, temp);
            this.isNeedAdjust = true;
        }
    };
    CameraSpin.prototype.handleMouseUp = function (event) {
        console.log(event.type);
        Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this.handleMouseMove);
        Laya.stage.off(Laya.Event.MOUSE_OUT, this, this.handleMouseUp);
        this.AdjustValue();
    };
    CameraSpin.prototype.handleMouseWheel = function (event) {
        var scaleFactor = event.delta;
        this.processToFarAndNear(scaleFactor);
    };
    CameraSpin.prototype.processToFarAndNear = function (scaleFactor) {
        console.log("scaleFactor:" + scaleFactor);
        if (Math.abs(scaleFactor) > 0.02) {
            var nexPos = Mathf_1.default.Vec_Add(this.cameraPos, Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Normalize(Mathf_1.default.Vec_Sub(this.cameraPos, this.camViewTargetPos)), scaleFactor * this.G_fZoomSpeed * 0.01));
            var nearPos = Mathf_1.default.Vec_Sub(this.camViewTargetPos, Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Normalize(Mathf_1.default.Vec_Sub(this.camViewTargetPos, this.cameraPos)), this.minDistance));
            var farPos = Mathf_1.default.Vec_Sub(this.camViewTargetPos, Mathf_1.default.Vec_Mul(Mathf_1.default.Vec_Normalize(Mathf_1.default.Vec_Sub(this.camViewTargetPos, this.cameraPos)), this.maxDistance));
            nexPos.x = nearPos.x < farPos.x ? Mathf_1.default.Clamp(nexPos.x, nearPos.x, farPos.x) : Mathf_1.default.Clamp(nexPos.x, farPos.x, nearPos.x);
            nexPos.y = nearPos.y < farPos.y ? Mathf_1.default.Clamp(nexPos.y, nearPos.y, farPos.y) : Mathf_1.default.Clamp(nexPos.y, farPos.y, nearPos.y);
            nexPos.z = nearPos.z < farPos.z ? Mathf_1.default.Clamp(nexPos.z, nearPos.z, farPos.z) : Mathf_1.default.Clamp(nexPos.z, farPos.z, nearPos.z);
            this.cameraPos = nexPos;
            this.isNeedAdjust = true;
        }
    };
    return CameraSpin;
}(Laya.Script3D));
exports.default = CameraSpin;
},{"./GameMgr":4,"./utils/Mathf":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CameraSpin_1 = require("./CameraSpin");
var GameMgr = /** @class */ (function (_super) {
    __extends(GameMgr, _super);
    function GameMgr() {
        return _super.call(this) || this;
    }
    GameMgr.prototype.onAwake = function () {
        GameMgr.instance = this;
    };
    GameMgr.prototype.onEnable = function () {
    };
    GameMgr.prototype.onDisable = function () {
    };
    GameMgr.prototype.onStart = function () {
        Laya.Scene3D.load("res/LayaScene_scene/Conventional/scene.ls", Laya.Handler.create(this, this.onLoadSceneCmp));
    };
    GameMgr.prototype.onLoadSceneCmp = function (scenes3D) {
        Laya.stage.addChild(scenes3D);
        this.scene3D = scenes3D;
        scenes3D.zOrder = -1;
        var camera = scenes3D.getChildByName("Main Camera");
        camera.addComponent(CameraSpin_1.default);
        // this.ball_prefab = Laya.Sprite3D.instantiate(ball as Laya.Sprite3D);
        // this.part = scenes3D.getChildByName("particle") as Laya.ShuriKenParticle3D;
    };
    return GameMgr;
}(Laya.Script));
exports.default = GameMgr;
},{"./CameraSpin":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 封装的Math的工具类
 */
var Mathf = /** @class */ (function () {
    function Mathf() {
    }
    Mathf.Vec_Add = function (vec1, vec2) {
        var vec3 = new Laya.Vector3();
        Laya.Vector3.add(vec1, vec2, vec3);
        return vec3;
    };
    Mathf.Vec_Sub = function (vec1, vec2) {
        var vec3 = new Laya.Vector3();
        Laya.Vector3.subtract(vec1, vec2, vec3);
        return vec3;
    };
    Mathf.Vec_Mul = function (vec1, value) {
        var vec3 = new Laya.Vector3();
        Laya.Vector3.multiply(vec1, new Laya.Vector3(value, value, value), vec3);
        return vec3;
    };
    Mathf.Vec_Normalize = function (vec1) {
        var vec3 = new Laya.Vector3();
        Laya.Vector3.normalize(vec1, vec3);
        return vec3;
    };
    Mathf.VecToQua = function (vec1) {
        var qua = new Laya.Quaternion();
        /* yaw y的弧度值  pitch x的弧度值  roll z的弧度值
         * 角度A1转换弧度A2:A2=A1*PI/180
         * 弧度A2转换角度A1:A1=A2*180/PI
        */
        Laya.Quaternion.createFromYawPitchRoll(vec1.y * Math.PI / 180, vec1.x * Math.PI / 180, vec1.z * Math.PI / 180, qua);
        return qua;
    };
    Mathf.VecDotQua = function (vec1, qua) {
        var vec3 = new Laya.Vector3();
        Laya.Vector3.transformQuat(vec1, qua, vec3);
        return vec3;
    };
    Mathf.Clamp = function (tar, min, max) {
        if (tar < min) {
            return min;
        }
        else if (tar > max) {
            return max;
        }
        else {
            return tar;
        }
    };
    Mathf.ClampAngle = function (angle, min, max) {
        if (angle < -360)
            angle = angle + 360;
        if (angle > 360)
            angle = angle - 360;
        return Mathf.Clamp(angle, min, max);
    };
    Mathf.QuaToVec = function (qua) {
        var vec = new Laya.Vector3();
        qua.getYawPitchRoll(vec);
        vec = new Laya.Vector3(vec.y * 180 / Math.PI, vec.x * 180 / Math.PI, vec.z * 180 / Math.PI);
        return vec;
    };
    Mathf.GetToTargetRotation = function (targetVec) {
        var qua = new Laya.Quaternion();
        Laya.Quaternion.rotationLookAt(targetVec, Mathf.VEC_UP, qua);
        return qua;
    };
    Mathf.VEC_UP = new Laya.Vector3(0, 1, 0);
    return Mathf;
}());
exports.default = Mathf;
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
